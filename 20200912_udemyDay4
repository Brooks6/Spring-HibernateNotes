//which injection type should you use
  1.spring injection types: 1)constructor injection
                            2)setter injection
                            3)field injection
  2.CHOOSE A STYLE: stay consistent in your project

//qualifiers for Dependency Injection
  1.autowiring: opps which one should be injected???
  2.e.g. @Autowired
         @Qualifier("happyFortuneService") //defalut name of HappyFortuneService class
  3.can apply @Qualifier annotation to all injection types

//scope annotation
  1.e.g. @Component
         @Scope("singleton")
         
//bean lifecycle method annotation
  1.development process: 1)define your methods for init and destroy
                         2)add annotations: @PostConstruct and @PreDestroy
                         
//spring configuration with java code (no xml) 
  1.java configuration: 1)instead of configuring spring container using XML
                        2)configure the spring container with java code
  2.development process: 1)create a java class and annotate as @Configuration
                         2)add component scanning support: @ComponentScan(optional)
                         3)read spring java configuration class
                         4)retrieve bean from spring container
                         
//defining spring beans with Java Code (no xml)
  1.development method to expose bean: 1)define method to expose bean
                                       2)inject bean dependencies
                                       3)read spring java configuration class
                                       4)retrieve bean from spring container

//Injecting Values from Properties File
  1.development process: 1)create properties file
                         2)load properties file in spring config
                         3)reference values from properties file
  2.@PropertySource("classpath:sport.properties")
  
//spring MVC overview
  1.def: 1)framework for building web application in java
         2)based on Model-View-Controller design pattern
         3)leverages features of the Core Spring Framework(Ioc, DI)
  2.spring MVC benefits: 1)the spring way of building web app UIs in java
                         2)leverage a set of reusable UI components
                         3)help manage application state for web requests
                         4)process form data: validation, conversion etc
                         5)flexible configuration for the view layer

//spring MVC - behind the scenes
  1.components of a spring MVC application: 1)a set of web pages to layout UI components
                                            2)a collection of spring beans(controllers, services, etc...)
                                            3)spring configuration(XML, annotations or java)
  2.spring MVC front controller: known as dispatcherServlet - 1)part of the spring framework
                                                              2)already developed by spring dev team
    you will create: 1)Model objects
                     2)View templates
                     3)Controller classes
  3.Controller: contains your business logic - 1)handle the request
                                               2)store/retrieve data(db, web service...)
                                               3)place data in model
    send to appropriate view template
  4.Model: contains your data
    store/retrieve data via backend systems: 1)database, web service, etc...
                                             2)use a spring bean if you like
    place your data in the model(data can be any java object/ collection)
  5.View template: most common is JSP+JSTL, used by developer to creates a page to display data
    JSP: Java Server Pages
    JSTL: JSP Standard Tag Library
    other view templates supported: thymeleaf, groovy, velocity, freemarker, etc...
  6.
